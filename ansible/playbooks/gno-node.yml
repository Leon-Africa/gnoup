- name: gno-node-setup
  hosts: all
  vars_files:
    - ../group_vars/txindexer.yml
    - ../group_vars/supernova.yml
  # vars:
  #   ansible_shell_executable: /bin/bash
  roles:
    - role: geerlingguy.go  #https://github.com/geerlingguy/ansible-role-ansible
      go_version: "1.24.3"
      go_platform: linux
      go_arch: amd64
      go_checksum: '3333f6ea53afa971e9078895eaa4ac7204a8c6b5c68c10e6bc9a33e8e391bdd8'
  become: true
  remote_user: ubuntu
  gather_facts: false
  vars:
    ansible_connection: aws_ssm
    ansible_aws_ssm_profile: default
    ansible_aws_ssm_bucket_name: "{{ ssm_bucket_name }}"
    ansible_aws_ssm_region: "eu-west-1"
  tasks:
    - name: pinging
      ping:

    - name: Display SSM bucket name [Generated]Add commentMore actions
      debug:
        msg: "SSM bucket name is {{ ansible_aws_ssm_bucket_name }}"

    - name: Go
      shell: |
        /usr/local/go/bin/go version
      register: result_git_install

    - name: Install Git
      shell: |
        sudo apt update
        sudo apt install git-all
      register: result_git_install

    - name: Install make
      shell: |
        sudo apt update
        sudo apt-get install make
      register: result_make_install

    - name: Install and Start Prometheus
      shell: |
        cd ../../../../
        sudo useradd --system --no-create-home --shell /bin/false prometheus
        wget https://github.com/prometheus/prometheus/releases/download/v2.51.1/prometheus-2.51.1.linux-amd64.tar.gz
        tar -xvf prometheus-2.51.1.linux-amd64.tar.gz
        sudo mkdir -p /data/ /etc/prometheus
        cd prometheus-2.51.1.linux-amd64
        sudo mv prometheus promtool /usr/local/bin/
        sudo mv consoles/ console_libraries/ /etc/prometheus/
        sudo mv prometheus.yml /etc/prometheus/prometheus.yml
        sudo chown -R prometheus:prometheus /etc/prometheus/ /data/
        cd ..
        rm -rf prometheus*

        sudo cat <<EOF > /etc/systemd/system/prometheus.service
        [Unit]
        Description=Prometheus
        Wants=network-online.target
        After=network-online.target

        StartLimitIntervalSec=500
        StartLimitBurst=5

        [Service]
        User=prometheus
        Group=prometheus
        Type=simple
        Restart=on-failure
        RestartSec=5s
        ExecStart=/usr/local/bin/prometheus \
          --config.file=/etc/prometheus/prometheus.yml \
          --storage.tsdb.path=/data \
          --web.console.templates=/etc/prometheus/consoles \
          --web.console.libraries=/etc/prometheus/console_libraries \
          --web.listen-address=0.0.0.0:9090 \
          --web.enable-lifecycle

        [Install]
        WantedBy=multi-user.target
        EOF

        sudo systemctl enable prometheus
        sudo systemctl start prometheus
      register: result_prometheus_install

    - name: Copy new prometheus.yml file
      copy:
        src: prometheus/prometheus.yml
        dest: /etc/prometheus/prometheus.yml

    - name: Restart Prometheus service
      systemd:
        name: prometheus
        state: restarted
      
    - name: Check if directory exists [gno]
      stat:
        path: /home/gno
      register: dir_check_gno

    - name: Clone Gno
      shell: |
        cd ../../../../home/
        git clone https://github.com/gnolang/gno.git
      when: not dir_check_gno.stat.exists
      register: result_clone_gn 
    
    - name: Build & Install Gnovm
      shell: |
        cd ../../../../home/
        export GOPATH=/usr/local/go
        export PATH=$GOPATH/bin:$PATH
        cd gno/gnovm
        make build
        make install
      register: result_gnovm_install


    - name: Build & Install Gnoland
      shell: |
        cd ../../../../home/
        export GOPATH=/usr/local/go
        export PATH=$GOPATH/bin:$PATH
        cd gno/gno.land
        make build
        make install
      register: result_gnoland

    - name: Create log directories
      shell: |
        cd ../../../../home/
        mkdir logs
        cd logs
        mkdir node tx-indexer supernova txtools
        touch node/node.log
        touch tx-indexer/indexer.log
        touch supernova/supernova.log
        touch txtools/txtools.log
      register: result_logs

    - name: Install expect
      shell: |
        sudo apt-get update
        sudo apt-get install expect
      register: result_expect_install

    - name: Transfer expect script to remote host
      copy:
        src: keys/gnokey_expect_script.exp
        dest: /home/gnokey_expect_script.exp
        mode: 0755  

    - name: Check if directory exists [keys]
      stat:
        path: /home/keys
      register: dir_check_keys

    - name: Run gnokey with passphrase provided by expect
      shell: |
        cd ../../../../
        mkdir home/keys
        ls -al
        pwd
        /home/gnokey_expect_script.exp >> /home/keys/mnemonic.txt
      when: not dir_check_keys.stat.exists
      register: result_key_generate
      args:
        executable: /bin/bash
     
    - name: List keys
      shell: |
        cd ../../../../home/
        /usr/local/go/bin/gnokey list
      register: result_start_node

    - name: Transfer expect script to remote host
      copy:
        src: keys/extract_mnemonic.sh 
        dest: /home/extract_mnemonic.sh 
        mode: 0755 

    - name: Run the bash script
      shell: | 
        cd ../../../../
        /home/extract_mnemonic.sh
      register: mnemonic_result

    # - name: Print mnemonic phrase
    #   debug:
    #     msg: "Mnemonic phrase: {{ mnemonic_result }}"

    - name: Start Node
      shell: |
        cd ../../../../home/
        /usr/local/go/bin/gnoland config init --config-path /gnoroot/gnoland-data/config/config.toml
        /usr/local/go/bin/gnoland config set --config-path /gnoroot/gnoland-data/config/config.toml rpc.laddr tcp://0.0.0.0:26657
        /usr/local/go/bin/gnoland config set --config-path /gnoroot/gnoland-data/config/config.toml telemetry.enabled true
        /usr/local/go/bin/gnoland config set --config-path /gnoroot/gnoland-data/config/config.toml telemetry.exporter_endpoint collector:4317
        /usr/local/go/bin/gnoland start start --lazy >> /home/logs/node/node.log 2>&1 &
      register: result_start_node

    - name: Check if directory exists [tx-indexer]
      stat:
        path: /home/tx-indexer
      register: dir_check_indexer

    - name: Clone TxIndexer
      shell: |
        cd ../../../../home/
        git clone https://github.com/gnolang/tx-indexer.git
      when: not dir_check_indexer.stat.exists
      register: result_clone_supernova
    
    - name: Build txindexer
      shell: |
        cd ../../../../home/
        export GOPATH=/usr/local/go
        export PATH=$GOPATH/bin:$PATH
        cd tx-indexer/
        make build
      register: result_txindexer_build

    - name: Run txindexer
      shell: |
        cd ../../../../home/
        export GOPATH=/usr/local/go
        export PATH=$GOPATH/bin:$PATH
        cd tx-indexer
        ./build/tx-indexer start --http-rate-limit {{ tx_indexer_http_rate_limit }} --listen-address {{ tx_indexer_listen_address }}  --log-level {{ tx_indexer_log_level }} --max-chunk-size {{ tx_indexer_max_chunk_size }} --max-slots {{ tx_indexer_max_slots }} --remote {{ tx_indexer_remote }}  --db-path {{ tx_indexer_db_path }} >> /home/logs/tx-indexer/indexer.log 2>&1 &
      register: result_txindexer

    - name: Transfer txtools to remote host
      copy:
        src: ../../txtools
        dest: /home/

    - name: Start Txtools
      shell: |
        cd ../../../../home/txtools
        export GOPATH=/usr/local/go
        export PATH=$GOPATH/bin:$PATH
        go run main.go >> /home/logs/txtools/txtools.log 2>&1 &
      register: result_start_txtools


    - name: Check if directory exists [supernova]
      stat:
        path: /home/supernova
      register: dir_check_supernova
      
    - name: Clone SuperNova
      shell: |
        cd ../../../../home/
        git clone https://github.com/gnolang/supernova.git
      when: not dir_check_supernova.stat.exists
      register: result_clone_supernova
    
    - name: Build SuperNova
      shell: |
        cd ../../../../home/
        export GOPATH=/usr/local/go
        export PATH=$GOPATH/bin:$PATH
        cd supernova/
        make build
      register: result_supernova_build

    # - name: Run SuperNova [using mnemonic]
    #   shell: 
    #     cmd: |
    #       cd ../../../../home/
    #       export GOPATH=/usr/local/go
    #       export PATH=$GOPATH/bin:$PATH
    #       cd supernova/
    #       ./build/supernova -sub-accounts {{ supernova_sub_accounts }} -transactions {{ supernova_transactions }} -url {{ supernova_url }} -mnemonic "{{ supernova_mnemonic }}" -output {{ supernova_output }}
    #   args:
    #     executable: /bin/bash

    - name: Install and Start Node Exporter
      shell: |
        cd ../../../../
        sudo useradd --system --no-create-home --shell /bin/false node_exporter
        wget https://github.com/prometheus/node_exporter/releases/download/v1.3.1/node_exporter-1.3.1.linux-amd64.tar.gz
        tar -xvf node_exporter-1.3.1.linux-amd64.tar.gz
        sudo mv node_exporter-1.3.1.linux-amd64/node_exporter /usr/local/bin/
        rm -rf node_exporter*
        node_exporter --version

        sudo cat <<EOF > /etc/systemd/system/node_exporter.service
        [Unit]
        Description=Node Exporter
        Wants=network-online.target
        After=network-online.target

        StartLimitIntervalSec=500
        StartLimitBurst=5

        [Service]
        User=node_exporter
        Group=node_exporter
        Type=simple
        Restart=on-failure
        RestartSec=5s
        ExecStart=/usr/local/bin/node_exporter \
        --collector.logind

        [Install]
        WantedBy=multi-user.target
        EOF

        sudo systemctl enable node_exporter
        sudo systemctl start node_exporter
        sudo systemctl status node_exporter
      register: result_node_exporter_install

    - name: Download OpenTelemetry Collector Contrib deb package
      get_url:
        url: https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v0.104.0/otelcol-contrib_0.104.0_linux_amd64.deb
        dest: /tmp/otelcol-contrib_0.104.0_linux_amd64.deb

    - name: Install OpenTelemetry Collector Contrib deb package
      apt:
        deb: /tmp/otelcol-contrib_0.104.0_linux_amd64.deb
        state: present

    - name: Copy OpenTelemetry Collector config
      copy:
        src: otel/config.yml
        dest: /etc/otelcol-contrib/config.yaml

    - name: Restart the otelcol-contrib service to apply changes
      systemd:
        name: otelcol-contrib
        state: restarted

    - name: Install Grafana
      shell: |
        cd ../../../../
        sudo apt-get install -y apt-transport-https software-properties-common
        wget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add -
        echo "deb https://packages.grafana.com/oss/deb stable main" | sudo tee -a /etc/apt/sources.list.d/grafana.list
        sudo apt-get update
        sudo apt-get -y install grafana
        sudo systemctl enable grafana-server
        sudo systemctl start grafana-server
      register: result_grafana_install
      
    - name: Transfer datasource.yml to remote host
      copy:
        src:  grafana/datasource.yml
        dest: /etc/grafana/provisioning/datasources/datasource.yml

    - name: Transfer dashboards.yml to remote host
      copy:
        src: grafana/dashboards.yml
        dest: /etc/grafana/provisioning/dashboards/dashboards.yml

    - name: Transfer Grafana dashboards to remote host
      copy:
        src: "{{ item }}"
        dest: /etc/grafana/provisioning/dashboards/
      loop:
        - grafana/dashboard.json
        - grafana/node_exporter.json
  
    - name: Stop and Start Grafana
      shell: |
        sudo systemctl stop grafana-server
        sudo systemctl start grafana-server
      register: result_grafana_stop_start
