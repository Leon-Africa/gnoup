- name: gno-node-setup
  hosts: all
  # vars:
  #   ansible_shell_executable: /bin/bash
  roles:
    - role: geerlingguy.go 
      go_version: "1.22.2"
      go_platform: linux
      go_arch: amd64
      go_checksum: '5901c52b7a78002aeff14a21f93e0f064f74ce1360fce51c6ee68cd471216a17'
  become: true
  remote_user: ubuntu
  gather_facts: false
  vars:
    ansible_connection: aws_ssm
    ansible_aws_ssm_profile: default
    ansible_aws_ssm_bucket_name: gno-node-aws-ssm-connection-playbook
    ansible_aws_ssm_region: "eu-west-1"
  tasks:
    - name: pinging
      ping:

    - name: Go
      shell: |
        /usr/local/go/bin/go version
      register: result_git_install

    - name: Install Git
      shell: |
        sudo apt update
        sudo apt install git-all
      register: result_git_install

    - name: Install make
      shell: |
        sudo apt update
        sudo apt-get install make
      register: result_make_install

    - name: Install and Start Prometheus
      shell: |
        cd ../../../../
        sudo useradd --system --no-create-home --shell /bin/false prometheus
        wget https://github.com/prometheus/prometheus/releases/download/v2.51.1/prometheus-2.51.1.linux-amd64.tar.gz
        tar -xvf prometheus-2.51.1.linux-amd64.tar.gz
        sudo mkdir -p /data/ /etc/prometheus
        cd prometheus-2.51.1.linux-amd64
        sudo mv prometheus promtool /usr/local/bin/
        sudo mv consoles/ console_libraries/ /etc/prometheus/
        sudo mv prometheus.yml /etc/prometheus/prometheus.yml
        sudo chown -R prometheus:prometheus /etc/prometheus/ /data/
        cd ..
        rm -rf prometheus*

        sudo cat <<EOF > /etc/systemd/system/prometheus.service
        [Unit]
        Description=Prometheus
        Wants=network-online.target
        After=network-online.target

        StartLimitIntervalSec=500
        StartLimitBurst=5

        [Service]
        User=prometheus
        Group=prometheus
        Type=simple
        Restart=on-failure
        RestartSec=5s
        ExecStart=/usr/local/bin/prometheus \
          --config.file=/etc/prometheus/prometheus.yml \
          --storage.tsdb.path=/data \
          --web.console.templates=/etc/prometheus/consoles \
          --web.console.libraries=/etc/prometheus/console_libraries \
          --web.listen-address=0.0.0.0:9090 \
          --web.enable-lifecycle

        [Install]
        WantedBy=multi-user.target
        EOF

        sudo systemctl enable prometheus
        sudo systemctl start prometheus
      register: result_prometheus_install

    - name: Copy new prometheus.yml file
      copy:
        src: prometheus/prometheus.yml
        dest: /etc/prometheus/prometheus.yml

    - name: Restart Prometheus service
      systemd:
        name: prometheus
        state: restarted
      
    - name: Check if directory exists [gno]
      stat:
        path: /home/gno
      register: dir_check_gno

    - name: Clone Gno
      shell: |
        cd ../../../../home/
        git clone https://github.com/gnolang/gno.git
      when: not dir_check_gno.stat.exists
      register: result_clone_gn 
    
    - name: Build & Install Gnovm
      shell: |
        cd ../../../../home/
        export GOPATH=/usr/local/go
        export PATH=$GOPATH/bin:$PATH
        cd gno/gnovm
        make build
        make install
      register: result_gnovm_install


    - name: Build & Install Gnoland
      shell: |
        cd ../../../../home/
        export GOPATH=/usr/local/go
        export PATH=$GOPATH/bin:$PATH
        cd gno/gno.land
        make build
        make install
      register: result_gnoland

    - name: Create log directories
      shell: |
        cd ../../../../home/
        mkdir logs
        cd logs
        mkdir node tx-indexer supernova txtools
        touch node/node.log
        touch tx-indexer/indexer.log
        touch supernova/supernova.log
        touch txtools/txtools.log
      register: result_logs

    - name: Install expect
      shell: |
        sudo apt-get update
        sudo apt-get install expect
      register: result_expect_install

    - name: Transfer expect script to remote host
      copy:
        src: keys/gnokey_expect_script.exp
        dest: /home/gnokey_expect_script.exp
        mode: 0755  

    - name: Check if directory exists [keys]
      stat:
        path: /home/keys
      register: dir_check_keys

    - name: Run gnokey with passphrase provided by expect
      shell: |
        cd ../../../../
        mkdir home/keys
        ls -al
        pwd
        /home/gnokey_expect_script.exp >> /home/keys/mnemonic.txt
      when: not dir_check_keys.stat.exists
      register: result_key_generate
      args:
        executable: /bin/bash
     
    - name: List keys
      shell: |
        cd ../../../../home/
        /usr/local/go/bin/gnokey list
      register: result_start_node

    - name: Transfer expect script to remote host
      copy:
        src: keys/extract_mnemonic.sh 
        dest: /home/extract_mnemonic.sh 
        mode: 0755 

    - name: Run the bash script
      shell: | 
        cd ../../../../
        /home/extract_mnemonic.sh
      register: mnemonic_result

    # - name: Print mnemonic phrase
    #   debug:
    #     msg: "Mnemonic phrase: {{ mnemonic_result }}"

    - name: Start Node
      shell: |
        cd ../../../../home/
        /usr/local/go/bin/gnoland start >> /home/logs/node/node.log 2>&1 &
      register: result_start_node

    - name: Check if directory exists [tx-indexer]
      stat:
        path: /home/tx-indexer
      register: dir_check_indexer

    - name: Clone TxIndexer
      shell: |
        cd ../../../../home/
        git clone https://github.com/gnolang/tx-indexer.git
      when: not dir_check_indexer.stat.exists
      register: result_clone_supernova
    
    - name: Build txindexer
      shell: |
        cd ../../../../home/
        export GOPATH=/usr/local/go
        export PATH=$GOPATH/bin:$PATH
        cd tx-indexer/
        make build
      register: result_txindexer_build

    - name: Run txindexer
      shell: |
        cd ../../../../home/
        export GOPATH=/usr/local/go
        export PATH=$GOPATH/bin:$PATH
        cd tx-indexer
        ./build/tx-indexer start --remote http://127.0.0.1:26657 --db-path indexer-db >> /home/logs/tx-indexer/indexer.log 2>&1 &
      register: result_txindexer

    - name: Transfer txtools to remote host
      copy:
        src: ../../txtools
        dest: /home/

    - name: Start Txtools
      shell: |
        cd ../../../../home/txtools
        export GOPATH=/usr/local/go
        export PATH=$GOPATH/bin:$PATH
        go run main.go >> /home/logs/txtools/txtools.log 2>&1 &
      register: result_start_txtools


    - name: Check if directory exists [supernova]
      stat:
        path: /home/supernova
      register: dir_check_supernova
      
    - name: Clone SuperNova
      shell: |
        cd ../../../../home/
        git clone https://github.com/gnolang/supernova.git
      when: not dir_check_supernova.stat.exists
      register: result_clone_supernova
    
    - name: Build SuperNova
      shell: |
        cd ../../../../home/
        export GOPATH=/usr/local/go
        export PATH=$GOPATH/bin:$PATH
        cd supernova/
        make build
      register: result_supernova_build

    - name: Run SuperNova [using mnemonic]
      shell: 
        cmd: |
          cd ../../../../home/
          export GOPATH=/usr/local/go
          export PATH=$GOPATH/bin:$PATH
          cd supernova/
          ./build/supernova -sub-accounts 5 -transactions 100 -url http://localhost:26657 -mnemonic "source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast" -output result.json
      args:
        executable: /bin/bash

    - name: Install and Start Node Exporter
      shell: |
        cd ../../../../
        sudo useradd --system --no-create-home --shell /bin/false node_exporter
        wget https://github.com/prometheus/node_exporter/releases/download/v1.3.1/node_exporter-1.3.1.linux-amd64.tar.gz
        tar -xvf node_exporter-1.3.1.linux-amd64.tar.gz
        sudo mv node_exporter-1.3.1.linux-amd64/node_exporter /usr/local/bin/
        rm -rf node_exporter*
        node_exporter --version

        sudo cat <<EOF > /etc/systemd/system/node_exporter.service
        [Unit]
        Description=Node Exporter
        Wants=network-online.target
        After=network-online.target

        StartLimitIntervalSec=500
        StartLimitBurst=5

        [Service]
        User=node_exporter
        Group=node_exporter
        Type=simple
        Restart=on-failure
        RestartSec=5s
        ExecStart=/usr/local/bin/node_exporter \
        --collector.logind

        [Install]
        WantedBy=multi-user.target
        EOF

        sudo systemctl enable node_exporter
        sudo systemctl start node_exporter
        sudo systemctl status node_exporter
      register: result_node_exporter_install

    - name: Install Grafana
      shell: |
        cd ../../../../
        sudo apt-get install -y apt-transport-https software-properties-common
        wget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add -
        echo "deb https://packages.grafana.com/oss/deb stable main" | sudo tee -a /etc/apt/sources.list.d/grafana.list
        sudo apt-get update
        sudo apt-get -y install grafana
        sudo systemctl enable grafana-server
        sudo systemctl start grafana-server
      register: result_grafana_install
      
    - name: Transfer datasource.yml to remote host
      copy:
        src:  grafana/datasource.yml
        dest: /etc/grafana/provisioning/datasources/datasource.yml

    - name: Transfer dashboard.json to remote host
      copy:
        src:  grafana/dashboard.json
        dest: /etc/grafana/provisioning/dashboards

    - name: Transfer dashboard.json to remote host
      copy:
        src:  grafana/15172_rev6.json
        dest: /etc/grafana/provisioning/dashboards

    - name: Stop and Start Grafana
      shell: |
        sudo systemctl stop grafana-server
        sudo systemctl start grafana-server
      register: result_grafana_sop_start
